@page "/purchaserequisition/create"

<div class="row p-3 align-items-center">
    <div class="col-6">
        <h3>
            Create Purchase Requisition
            <span class="@(IsApproved ? "indicator-pill whitespace-nowrap green" : (IsDraft ? "indicator-pill whitespace-nowrap red" : "indicator-pill whitespace-nowrap orange"))">
                <span>@(IsApproved ? "Approved" : (IsDraft ? "Draft" : "Not Saved"))</span>
            </span>
        </h3>
    </div>
    <div class="col-6 d-flex justify-content-end">
       @*  <button type="submit" class="btn btn-primary rounded-3 text-sm-center" @onclick="ToggleApproval">@GetSubmitButtonText()</button> *@
        @if (!IsApproved)
        {
            <button type="submit" class="btn btn-primary rounded-3 text-sm-center" @onclick="ToggleApproval">
                @GetSubmitButtonText()
            </button>
        }
    </div>
</div>


<div class="row m-3 p-3 rounded-3 shadow-sm bg-light">
    <!-- Purchase Requisition Form -->
    <form class="row g-3">
        <div class="col-md-6">
            <label class="form-label">Purchase Requisition Number</label>
            <input type="text" class="form-control">
        </div>
        <div class="col-md-6">
            <label class="form-label">Creation Date</label>
            <input type="date" value="@DateTime.Now.ToString("yyyy-MM-dd")" min="@DateTime.Now.ToString("yyyy-MM-dd")" class="form-control">
        </div>
        <div class="col-md-6">
            <label class="form-label">Vendor</label>
            <input type="text" class="form-control">
        </div>
        @* <div class="col-md-6">
            <label class="form-label">Required By</label>
            <input type="date" value="@DateTime.Now.ToString("yyyy-MM-dd")" min="@DateTime.Now.ToString("yyyy-MM-dd")" class="form-control">
        </div> *@
    </form>
</div>

<div class="row m-3 p-3 rounded-3 shadow-sm bg-light">
    <h5>Items</h5>
    <form class="row g-3">
        <table class="table table-bordered border-primary">
            <thead>
                <tr>
                    <th class="col col-auto" style="width: 50px;">
                        @* <input type="checkbox" @onchange="ToggleAllRowsSelection" /> *@
                        No.
                    </th>
                    <th class="col col-auto">
                        Item
                    </th>
                    <th class="col col-auto" style="width: 70px;">
                        Quantity
                    </th>
                    <th class="col col-auto text-center" style="width: 150px;">
                        UOM
                    </th>
                    <th class="col col-auto" style="width: 150px;">
                        Required By
                    </th>
                    @* <th class="col col-auto">Actions</th> <!-- Add a header for actions --> *@
                </tr>
            </thead>
            <tbody id="table-body">
                <!-- Rows will be added here dynamically -->
                @for (int index = 0; index < Items.Count; index++)
                {
                    var item = Items[index];
                    <tr>
                        <td>
                            <div style="display: flex; align-items: center;">
                                <input type="checkbox" class="me-1" @bind="item.Selected" />
                                @(index + 1)
                                <button class="ms-2 btn btn-sm btn-danger" @onclick:preventDefault @onclick="() => DeleteRow(index)" style="display: @(item.Selected ? "block" : "none")">Delete</button>
                            </div>
                        </td>
                        <td><input type="text" class="form-control" @bind="item.Name" /></td>
                        <td><input type="text" class="form-control" @bind="item.Quantity" /></td>
                        <td>
                            <input type="text" list="uomOptions" class="form-control" @bind="item.UOM" />
                            <datalist id="uomOptions">
                                <option value="Piece"></option>
                                <option value="Each"></option>
                                <option value="Box"></option>
                                <!-- Add more UOM options as needed -->
                            </datalist>
                        </td>
                        <td>
                            <input type="date" class="form-control" @bind="item.RequiredBy" min="@DateTime.Now.ToString("dd-MM-yyyy")" />
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </form>
    <div class="col-12">
        <button class="btn btn-primary rounded-pill" @onclick="AddRow">Add Row</button>
    </div>
</div>


@code {
    private bool IsApproved { get; set; } = false;
    private bool IsDraft { get; set; } = false;
    private bool IsSaving { get; set; } = false;

    private string GetSubmitButtonText()
    {
        if (IsApproved)
        {
            return "Approved";
        }
        else if (IsDraft)
        {
            return "Submit";
        }
        else
        {
            return "Save";
        }
    }

    private void ToggleApproval()
    {
        if (IsDraft)
        {
            IsDraft = false;
            IsApproved = true;
            IsSaving = false;
        }
        else if (!IsSaving)
        {
            IsDraft = true;
        }
    }

    // Add the Save logic here when the Save button is clicked.
    // You can update the IsDraft and IsSaving flags accordingly.
    private async Task Save()
    {
        // Your save logic here.
        // Example:
        // await YourDataService.SavePurchaseRequisitionAsync(); // Replace with your actual save method.
        IsDraft = true;
        IsSaving = true;

        // Simulate a delay (remove this line in your actual code).
        await Task.Delay(1000);

        IsSaving = false;
    }


    private List<Item> Items { get; set; } = new List<Item>();

    private void AddRow()
    {
        Items.Add(new Item
            {
                RequiredBy = DateTime.Now, // Set the default date to the current date
            });
    }

    private void DeleteRow(int index)
    {
        for (int i = Items.Count - 1; i >= 0; i--)
        {
            if (Items[i].Selected)
            {
                Items.RemoveAt(i);
            }
        }
    }

    // private record SimpleCallback(Action Callback) : IHandleEvent
    // {
    //     public static Action Create(Action callback) => new SimpleCallback(callback).Invoke;

    //     public void Invoke() => Callback();
    //     public Task HandleEventAsync(EventCallbackWorkItem item, object arg) => Task.CompletedTask;
    // }

    // private void ToggleAllRowsSelection()
    // {
    //     bool selectAll = Items.All(item => item.Selected);
    //     foreach (var item in Items)
    //     {
    //         item.Selected = !selectAll;
    //     }
    // }

    private class Item
    {
        public string Name { get; set; }
        public int Quantity { get; set; }
        public string UOM { get; set; }
        public DateTime RequiredBy { get; set; }
        public bool Selected { get; set; }
    }
}
